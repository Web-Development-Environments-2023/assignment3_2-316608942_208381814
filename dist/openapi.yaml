---
openapi: 3.0.0
info:
  title: Assinment_3.1_API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/LUZONE/Project/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular
paths:
  /Register:
    post:
      summary: A new user from the client is added to the server.
      description: A json object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: wrong input parameters
  /LogIn:
    post:
      summary: An existing user from the client is logged in to the server.
      description: The server check in the json if the user name and password are correct.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogIn'
        required: true
      responses:
        "201":
          description: LogIn succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Use name or password incorrect
  /RandomRecipes:
    get:
      description: get random recipes to display
      parameters:
      - name: quantity
        in: query
        description: "number of wanted recipes, by default 3"
        required: false
        style: form
        explode: true
        schema:
          minimum: 3
          type: integer
          example: 3
      responses:
        "200":
          description: successfully returned random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummariedRecipe'
        "400":
          description: quantity invalid
  /LastSearch:
    get:
      description: get last search for logged in user
      parameters:
      - name: username
        in: query
        description: user
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: browser
        in: query
        description: brower
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "400":
          description: last search unavailable
  /SearchRecipe:
    get:
      description: search recipes
      parameters:
      - name: username
        in: query
        description: user
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: query for search
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: numberOfResultsToDisplay
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: options
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/SearchOptions'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummariedRecipe'
        "400":
          description: search results unavailable
  /createRecipe:
    put:
      description: create a new recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRecipeParams'
        required: true
      responses:
        "200":
          description: successfully created recipe
        "400":
          description: recipe cretion faile
  /setFavoriteRecipe:
    put:
      description: set recipe to be favorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setFavoriteRecipebody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inlineresponse200'
        "400":
          description: invalid params
  /getFavioriteRecepies:
    get:
      description: get users favorit recipies
      parameters:
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummariedRecipe'
        "400":
          description: search results unavailable
  /userWatchedRecipe:
    get:
      description: tag a recipe as watched by a user
      parameters:
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: recipeId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        "400":
          description: invalid params
  /getLastWatchedRecipies:
    get:
      description: get the last recipe that the user watched
      parameters:
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: quantity
        in: query
        description: "number of wanted recipes, by default 3"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummariedRecipe'
        "400":
          description: params invalid
  /getMyRecepies:
    get:
      description: get the recipes that where written by the user
      parameters:
      - name: username
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SummariedRecipe'
        "400":
          description: params invalid
  /setMyRecipies:
    post:
      description: set the recipes written by the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/setMyRecipeParams'
        "400":
          description: params invalid
  /getRecipe:
    get:
      description: get a recipe by recipe id
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedRecipe'
        "400":
          description: id invalid
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: Sapirosh
        firstname:
          type: string
          description: user's first name
          example: Sapir
        lasttname:
          type: string
          description: user's last name
          example: Sharabi
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: "passwords contains  between 5 to 10 , at least one of them is a  number and a special char"
          example: 1#23456789
        passwordconfirmation:
          type: string
          example: 1#23456789
        email:
          type: string
          description: user's email
          example: sapsh@post.bgu.ac.il
    LogIn:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: Sapirosh
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: "passwords contains  between 5 to 10 , at least one of them is a  number and a special char"
          example: 1#23456789
    SummariedRecipe:
      type: object
      properties:
        id:
          type: integer
          example: 45
        name:
          type: string
        description:
          type: string
        publishedIn:
          type: string
        timeToPrepare:
          type: integer
        imagePath:
          type: string
        foodId:
          type: integer
    SearchOptions:
      type: object
      properties:
        isFood:
          type: boolean
          description: true if user is searchong for specific food
        quantity:
          type: integer
          description: "the user choose the amount of recipes to desply 5/10/15 , by default 5."
        dietType:
          $ref: '#/components/schemas/DietType'
    DietType:
      type: string
      enum:
      - keto
      - sugar free
      - healthy
      - junk food
      - gluten free
      - vegan
      - vegetarian
      - kohsher
    createRecipeParams:
      type: object
      properties:
        detailedRecipe:
          $ref: '#/components/schemas/DetailedRecipe'
        username:
          type: string
    setMyRecipeParams:
      type: object
      properties:
        detailedRecipe:
          $ref: '#/components/schemas/DetailedRecipe'
        username:
          type: string
    DetailedRecipe:
      type: object
      properties:
        recipe:
          $ref: '#/components/schemas/SummariedRecipe'
        likes:
          type: integer
        dietTypes:
          type: array
          items:
            $ref: '#/components/schemas/DietType'
        Ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        Instructions:
          type: array
          items:
            $ref: '#/components/schemas/Step'
    Ingredient:
      type: object
      properties:
        name:
          type: string
          example: sugar
    Step:
      type: object
      properties:
        index:
          type: integer
        description:
          type: string
          example: mix all ingredients
        isDone:
          type: boolean
    Food:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        Recipes:
          type: array
          items:
            $ref: '#/components/schemas/SummariedRecipe'
    setFavoriteRecipebody:
      type: object
      properties:
        recipeId:
          type: integer
        username:
          type: string
    inlineresponse200:
      type: object
      properties:
        status:
          type: boolean
